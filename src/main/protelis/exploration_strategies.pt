module exploration_strategies
import utils
import java.lang.Math.toRadians
import java.lang.Math.cos
import java.lang.Math.sin
import java.lang.Math.abs
import java.lang.Math.max
import java.lang.Math.PI


def getForceOfWill() {
    10
}

def getRepulsiveForce(distance) {
    (getForceOfWill() / 2) * (((getFoVDistance() * 2) ^ 2) / (max(1, distance) ^ 2))
}

def getAttractiveForce(distance) {
    - ((getMaxCamerasPerTarget() * getRepulsiveForce(distance) * 4) / max(1, distance))
}

def getEnvironmentBoundaryForce(envPoint) {
    let myPos = self.getCoordinates()
    let versor = unitVector(myPos - envPoint)
    getRepulsiveForce(distanceBetweenPos(myPos, envPoint)) * versor
}

def getEnvironmentBoundariesForce() {
    let halfEnvSize = getEnvironmentSize() / 2
    let myCoords = self.getCoordinates()
    let myX = myCoords.get(0)
    let myY = myCoords.get(1)
    let top = getEnvironmentBoundaryForce([myX, halfEnvSize])
    let right = getEnvironmentBoundaryForce([halfEnvSize, myY])
    let bottom = getEnvironmentBoundaryForce([myX, -halfEnvSize])
    let left = getEnvironmentBoundaryForce([-halfEnvSize, myY])
    top + right + bottom + left
}

def randomAngle() {
    2 * PI * self.nextRandomDouble()
}

public def fieldExploration() {
    let cameraVersorsField = nbrVersor()
    let distanceFromCamerasField = self.nbrRange()

    let cameraForces = getRepulsiveForce(distanceFromCamerasField) * cameraVersorsField

    let envBoundariesForce = getEnvironmentBoundariesForce()

    let targetForces = unionHood PlusSelf(nbr(getVision())).map {
        getAttractiveForce(distanceFromTarget(it)) * unitVector(self.getCoordinates() - posToTuple(it.getPosition()))
    }.reduce([0,0]) { a,b -> a + b }

    let sumOfForces = sumHood(cameraForces) + envBoundariesForce + targetForces

    rep(myDirectionAngle <- randomAngle()){
        let myDirection = angleToVersor(myDirectionAngle)
        let myForce = myDirection * getForceOfWill()
        let destination = self.getCoordinates() + sumOfForces + myForce
        let newDirectionAngle = directionToAngle(destination - self.getCoordinates())
        let augment = getMaxMovementSpeed() * 2 // make sure we try to go at max speed
        destination = destination + [augment * cos(newDirectionAngle), augment * sin(newDirectionAngle)]
        env.put("destination", destination)
        env.put("heading", destination)
        //envRemove("heading")
        //env.put("doSpin", true)
        newDirectionAngle
    }
}


public def zigZagExploration() {
    envRemove("destination")
    envRemove("heading")
    env.put("doSpin", true)
    env.put("doZigZag", true)
    noTarget()
}